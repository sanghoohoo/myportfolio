{
  "hash": "6de730bb9817d3d028263f0529231774",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"HW2.2\"\nauthor: 'Sanghoo Ahn'\ndate: '2024-07-18'\ncategories: [Homework]\njupyter: python3\n---\n\n## mpg데이터와 midwest 데이터를 이용해 분석 문제를 해결해 보세요.\n\n**mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.**\n\n::: {#10d912a9 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpg=pd.read_csv('../../data/mpg.csv')\nsns.scatterplot(data=mpg,\n                x='cty', y='hwy')\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=585 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n**미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.**\n\n::: {#9333ea3d .cell execution_count=2}\n``` {.python .cell-code}\nmdw=pd.read_csv('../../data/midwest.csv')\nsns.scatterplot(data=mdw,\n                x='poptotal', y='popasian').set(xlim=[0,500000], ylim=[0,10000])\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=635 height=434}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n## mpg데이터를 이용해 분석 문제를 해결해 보세요.\n\n**어떤 회사에서 생산한 'suv'차종의 도시 연비가 높은지 알아보려고 합니다. 'suv'차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.**\n\n::: {#07c53685 .cell execution_count=3}\n``` {.python .cell-code}\ndf_mpg=mpg.groupby('manufacturer', as_index=False)\\\n    .agg(cty_mean=('cty','mean')).\\\n    sort_values('cty_mean',ascending=False).head()\nsns.barplot(data=df_mpg, x='manufacturer', y='cty_mean', hue='manufacturer')\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=585 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n**자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요**\n\n::: {#5f8cab87 .cell execution_count=4}\n``` {.python .cell-code}\ndf_mpg2=mpg.groupby('category', as_index=False)\\\n    .agg(cat_count=('category','count')).\\\n    sort_values('cat_count',ascending=False)\nsns.barplot(data=df_mpg2, x='category', y='cat_count', hue='category')\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=585 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n  <form id=\"comment-form\">\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n    \n    <label for=\"comment\">Leave a Comment:</label><br>\n    <textarea id=\"comment\" name=\"comment\" rows=\"4\" cols=\"50\" required></textarea><br><br>\n    \n    <input type=\"submit\" value=\"Submit\">\n</form>\n\n<div id=\"comments-section\">\n\n</div>\n\n<script>\n    // Function to handle form submission\n    document.getElementById('comment-form').addEventListener('submit', function(e) {\n        e.preventDefault();\n        \n        var name = document.getElementById('name').value;\n        var commentText = document.getElementById('comment').value;\n\n        // Display the new comment\n        var commentHTML = `\n            <div class=\"comment\">\n                <p><strong>${name}</strong> says:</p>\n                <p>${commentText}</p>\n            </div>\n        `;\n        document.getElementById('comments-section').innerHTML += commentHTML;\n        document.getElementById('name').value = ''; // Clear the name input\n        document.getElementById('comment').value = ''; // Clear the textarea\n    });\n</script>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}