{
  "hash": "c45bf81a379515d4c5a0d49b32374c45",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Kaggle: Houseprice -stacking\"\nauthor: 'Sanghoo Ahn'\ndate: '2024-09-27'\ncategories: [Machine Learning]\njupyter: python3\n---\n\n## Kaggle 링크\n[House Prices - Advanced Regression Techniques](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques)\n\n## 전처리\n\n::: {#4c6e0594 .cell execution_count=1}\n``` {.python .cell-code}\n# 필요한 패키지 불러오기\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\nnp.random.seed(20240911) \n\n## 필요한 데이터 불러오기\nhouse_train=pd.read_csv(\"train.csv\")\nhouse_test=pd.read_csv(\"test.csv\")\nsub_df=pd.read_csv(\"sample_submission.csv\")\n\n## NaN 채우기\n# 각 숫치형 변수는 평균 채우기\n# 각 범주형 변수는 Unknown 채우기\nhouse_train.isna().sum()\nhouse_test.isna().sum()\n\n## 숫자형 채우기\nquantitative = house_train.select_dtypes(include = [int, float])\nquantitative.isna().sum()\nquant_selected = quantitative.columns[quantitative.isna().sum() > 0]\n\nfor col in quant_selected:\n    house_train[col] = house_train[col].fillna(house_train[col].mean())\nhouse_train[quant_selected].isna().sum()\n\n## 범주형 채우기\nqualitative = house_train.select_dtypes(include = [object])\nqualitative.isna().sum()\nqual_selected = qualitative.columns[qualitative.isna().sum() > 0]\n\nfor col in qual_selected:\n    house_train[col] = house_train[col].fillna(\"unknown\")\n\n\n# test 데이터 채우기\n## 숫자형 채우기\nquantitative = house_test.select_dtypes(include = [int, float])\nquantitative.isna().sum()\nquant_selected = quantitative.columns[quantitative.isna().sum() > 0]\n\nfor col in quant_selected:\n    house_test[col] = house_test[col].fillna(house_train[col].mean())\nhouse_test[quant_selected].isna().sum()\n\n## 범주형 채우기\nqualitative = house_test.select_dtypes(include = [object])\nqualitative.isna().sum()\nqual_selected = qualitative.columns[qualitative.isna().sum() > 0]\n\nfor col in qual_selected:\n    house_test[col] = house_test[col].fillna(\"unknown\")\nhouse_test[qual_selected].isna().sum()\n\n\nhouse_train.shape\nhouse_test.shape\ntrain_n=len(house_train)\n\n# 통합 df 만들기 + 더미코딩\n# house_test.select_dtypes(include=[int, float])\n\ndf = pd.concat([house_train, house_test], ignore_index=True)\n# df.info()\ndf = pd.get_dummies(\n    df,\n    columns= df.select_dtypes(include=[object]).columns,\n    drop_first=True\n    )\ndf\n\n# train / test 데이터셋\ntrain_df=df.iloc[:train_n,]\ntest_df=df.iloc[train_n:,]\n\n## 이상치 탐색\ntrain_df=train_df.query(\"GrLivArea <= 4500\")\n\n## train\ntrain_x=train_df.drop(\"SalePrice\", axis=1)\ntrain_y=train_df[\"SalePrice\"]\n\n## test\ntest_x=test_df.drop(\"SalePrice\", axis=1)\n\n# 표준화\nfrom sklearn.preprocessing import StandardScaler\nnum_features = house_test.select_dtypes(include = [int, float]).columns\n\nscaler = StandardScaler()\ntrain_x[num_features] = scaler.fit_transform(train_x[num_features])\ntest_x[num_features] = scaler.transform(test_x[num_features])\n```\n:::\n\n\n## 모델 생성 및 예측\n\n::: {#be5ea125 .cell execution_count=2}\n``` {.python .cell-code}\n# 부스트 모델 생성\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\nxgb_model = xgb.XGBRegressor(random_state=20240911)\n\nparam_grid = {\n    'n_estimators': [100, 200],\n    'learning_rate': [0.05, 0.1, 0.2],\n    'max_depth': [3, 4, 5]\n}\n\ngrid_search = GridSearchCV(\n    estimator=xgb_model,\n    param_grid=param_grid,\n    scoring='neg_mean_squared_error',\n    cv=5\n)\n\ngrid_search.fit(train_x, train_y)\n\nbest_params = grid_search.best_params_\nbest_xgb_model = grid_search.best_estimator_\n\n# rf 모델 생성\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(random_state=20240911, n_estimators=100, max_features=None)\n\nparam_grid={\n    'max_depth': [25],\n    'min_samples_split': [3]\n}\n\ngrid_search=GridSearchCV(\n    estimator=model,\n    param_grid=param_grid,\n    scoring='neg_mean_squared_error',\n    cv=5\n)\n\ngrid_search.fit(train_x,train_y)\ngrid_search.best_params_\nbest_rf_model=grid_search.best_estimator_\n\n# 스택킹\ny1_hat=best_xgb_model.predict(train_x)\ny2_hat=best_rf_model.predict(train_x)\n\ntrain_x_stack=pd.DataFrame({\n    'y1':y1_hat,\n    'y2':y2_hat\n})\n\npred_y_xgb=best_xgb_model.predict(test_x)\npred_y_rf=best_rf_model.predict(test_x)\n\ntest_x_stack=pd.DataFrame({\n    'y1': pred_y_xgb,\n    'y2': pred_y_rf\n})\n\n# 블렌더\nfrom sklearn.linear_model import LinearRegression\nblender_model = LinearRegression()\nblender_model.fit(train_x_stack, train_y)\npred_y = blender_model.predict(test_x_stack)\n\n# SalePrice 바꿔치기\nsub_df[\"SalePrice\"] = pred_y\nsub_df\n\n# # csv 파일로 내보내기\nsub_df.to_csv(\"sample_submission_boost_rf.csv\", index=False)\n```\n:::\n\n\n## 모델 성능\n\n::: {#61183308 .cell execution_count=3}\n``` {.python .cell-code}\n# 모델 성능 평가\nfrom sklearn.metrics import mean_squared_error\ntrain_y_pred = blender_model.predict(train_x_stack)\nmse = mean_squared_error(train_y, train_y_pred)\nprint(f\"Mean Squared Error on training set: {mse:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error on training set: 63552590.01\n```\n:::\n:::\n\n\n<div id=\"disqus_thread\"></div>\n<script>\nvar disqus_config = function () {\n    this.page.url = window.location.href;  // 현재 페이지 URL\n    this.page.identifier = window.location.pathname; // 페이지 고유 식별자\n};\n\n(function() { // DON'T EDIT BELOW THIS LINE\n    var d = document, s = d.createElement('script');\n    s.src = 'https://sanghoohoo.disqus.com/embed.js';\n    s.setAttribute('data-timestamp', +new Date());\n    (d.head || d.body).appendChild(s);\n})();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}