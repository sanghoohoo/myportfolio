{
  "hash": "3a0532d4c231f918cc3e64a18e6a42d1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"전력 사용량 예측 프로젝트\"\nauthor: 'Sanghoo Ahn'\ndate: '2024-10-11'\ncategories: [project]\njupyter: python3\n---\n\n\n## 최종 분석 코드\n\n::: {#71246adb .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.metrics import f1_score, confusion_matrix\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import precision_recall_curve, roc_curve, f1_score, confusion_matrix, auc, precision_score, recall_score, roc_auc_score\nfrom sklearn.model_selection import GridSearchCV, TimeSeriesSplit\n\nnp.random.seed(42)\n\n## 필요한 데이터 불러오기\ndf = pd.read_csv(\"./data_week2.csv\", encoding='cp949')\n\n# 컬럼명 바꾸기\ndf = df.rename(columns = {'num' : '건물번호', 'date_time' : '날짜' , '전력사용량(kWh)' : '전력사용량' , '기온(°C)':'기온', '풍속(m/s)' :'풍속'  , '습도(%)':'습도' , '강수량(mm)':'강수량', '일조(hr)' : '일조'  })\nlen(df.query(\"전력사용량==0\"))\n\n# 데이터 자료형 바꾸기\ndf['날짜'] = pd.to_datetime(df['날짜'])\ndf['비전기냉방설비운영'] = df['비전기냉방설비운영'].astype('boolean')\ndf['태양광보유'] = df['태양광보유'].astype('boolean')\n\n# 인코딩\ndf['년'] = df['날짜'].dt.year\ndf['월'] = df['날짜'].dt.month\ndf['일'] = df['날짜'].dt.day\ndf['요일'] = df['날짜'].dt.dayofweek  # 0: 월요일, 6: 일요일\ndf['시'] = df['날짜'].dt.hour\ndf['시간_sin'] = np.sin(2 * np.pi * df['시'] / 24)\ndf['시간_cos'] = np.cos(2 * np.pi * df['시'] / 24)\n\n# 파생변수 추가\ndf['주말'] = df['요일'].apply(lambda x: 1 if x >= 5 else 0)  # 주말: 1, 평일: 0\ndf['기온_1시간전'] = df['기온'].shift(1)  # 1시간 전 기온\ndf['기온_24시간전'] = df['기온'].shift(24)  # 24시간 전 기온\ndf['기온_3시간평균'] = df['기온'].rolling(window=3).mean()  # 최근 3시간 평균\ndf['기온_24시간평균'] = df['기온'].rolling(window=24).mean()  # 최근 24시간 평균\ndf['풍속_24시간평균'] = df['풍속'].rolling(window=24).mean()  # 최근 24시간 평균\ndf['강수량_24시간평균'] = df['강수량'].rolling(window=24).mean()  # 최근 24시간 평균\ndf[\"체감온도\"]=13.12 + 0.6215 *df[\"기온\"] -11.37*(df[\"풍속\"]**0.16) + 0.3965*df[\"기온\"]*(df[\"풍속\"]**0.16)\ndf[\"불쾌지수\"]=0.81 *df[\"기온\"]+ 0.01*df[\"습도\"] *(0.99*df[\"기온\"]-14.3)+46.3\n\n# 건물 번호에 따른 데이터 반환 함수\ndef building(n):\n    # 지정된 건물 번호로 필터링\n    df_n = df.query(f'건물번호 == {n}')\n\n    # 이전 4개의 동일 요일, 시간대 전력 사용량의 중앙값을 구해 새로운 열에 추가\n    median_series = (\n        df_n.groupby(['요일', '시'])['전력사용량']\n        .apply(lambda x: x.shift().rolling(window=4, min_periods=1).median())\n    )\n\n    median_df = pd.DataFrame({'index' : median_series.index.get_level_values(2),\n                        '전력중앙값' : median_series.values})\n\n    df_n = pd.merge(df_n, median_df, how='left', left_index=True, right_on='index')\n    df_n.set_index('index', inplace=True)\n\n\n    # 변화율 계산하여 새로운 칼럼 추가\n    df_n['변화율'] = ((df_n['전력사용량'] - df_n['전력중앙값']) / df_n['전력중앙값']) * 100\n\n    df_n = df_n.dropna()\n\n    # 급증 기준: 동일 요일 동 시간대 4개의 중앙값 대비 증가율 30% 초과\n    df_n['급증'] = df_n['변화율'] > 30\n\n    # 전역 변수로 할당\n    globals()[f'df_{n}'] = df_n\n\n# 빌딩 1부터 60까지의 급증 갯수 계산\nsurge = []\nfor i in range(1, 61):\n    building(i)\n    df_n = globals()[f'df_{i}']\n    surge_count = df_n['급증'].sum()\n    surge.append({'건물번호': i, '급증갯수': surge_count})\n\n# 결과를 데이터프레임으로 변환\nsurge_df = pd.DataFrame(surge)\nsurge_df.sort_values(by='급증갯수',ascending=False).reset_index().drop('index',axis=1)\n\nnp.random.seed(42)\n\n# df_59에서 급증 갯수가 3개 이상인 날짜 필터링\n# df_true_counts = df_59[df_59['급증']].groupby(df_59['날짜'].dt.date).size()\n# days_with_three_or_more_true = df_true_counts[df_true_counts >= 3]\n\n# 데이터 전처리: 학습에 필요 없는 컬럼 제거\n## df_1 ~ df_60 선택\ndf = df_59.drop(['날짜', '시', '일조', '건물번호', '전력사용량', '비전기냉방설비운영', '태양광보유', '년', '날짜', '전력중앙값', '변화율'], axis=1)\n# 학습 및 테스트 데이터셋 분할\n# 6, 7일\n# test_df = df[(df['월'] == 8) & ((df['일'] == 6)|(df['일'] == 7))]\n# train_df = df[(df['월'] < 8) | ((df['월'] == 8) & (df['일'] < 6))]\n\n# 7, 8\n# test_df = df[(df['월'] == 8) & ((df['일'] == 7)|(df['일'] == 8))]\n# train_df = df[(df['월'] < 8) | ((df['월'] == 8) & (df['일'] < 7))]\n\n# 18, 19일\n# test_df = df[(df['월'] == 8) & ((df['일'] == 18)|(df['일'] == 19))]\n# train_df = df[(df['월'] < 8) | ((df['월'] == 8) & (df['일'] < 18))]\n\n# 19, 20일\ntest_df = df[(df['월'] == 8) & ((df['일'] == 19)|(df['일'] == 20))]\ntrain_df = df[(df['월'] < 8) | ((df['월'] == 8) & (df['일'] < 19))]\n\n# 20, 21일\n# test_df = df[(df['월'] == 8) & ((df['일'] == 20)|(df['일'] == 21))]\n# train_df = df[(df['월'] < 8) | ((df['월'] == 8) & (df['일'] < 20))]\n\n# 22, 23일\n# test_df = df[(df['월'] == 8) & ((df['일'] == 22)|(df['일'] == 23))]\n# train_df = df[(df['월'] < 8) | ((df['월'] == 8) & (df['일'] < 22))]\n\n# 23, 24일\n# test_df = df[(df['월'] == 8) & (df['일'] >= 23)]\n# train_df = df.drop(test_df.index)\n\n# 특징 변수와 타겟 변수 분리\nX_train = train_df.drop('급증', axis=1).values\ny_train = train_df['급증'].values\nX_test = test_df.drop('급증', axis=1).values\ny_test = test_df['급증'].values\n\n# 그리드서치\n# TimeSeriesSplit 객체 생성\ntscv = TimeSeriesSplit(n_splits=5)\n# Grid Search에 사용할 파라미터 범위 정의\nparam_grid = {\n    'iterations': [1000,2000,3000,4000,5000]\n}\n\nscale_pos_weight = (len(y_test) - y_test.sum()) / y_test.sum()\ncatboost_clf = CatBoostClassifier(scale_pos_weight=scale_pos_weight, learning_rate=0.1, depth=6, eval_metric='AUC', random_seed=42, verbose=0)\n\ngrid_search = GridSearchCV(estimator=catboost_clf, param_grid=param_grid, \n                           scoring='roc_auc', cv=tscv, n_jobs=-1)\n\ngrid_search.fit(X_train, y_train)\n\ngrid_search.best_params_\ncatboost_clf = grid_search.best_estimator_\n\n# 예측 및 평가\nprob_y = catboost_clf.predict_proba(X_test)[:, 1]  # 양성 클래스의 확률\n\n# 임계값 목록 생성\nthresholds = np.arange(0, 1.1, 0.1)\nresults = []\n\nroc_auc = roc_auc_score(y_test, prob_y)\nfor threshold in thresholds:\n    pred_y_threshold = (prob_y >= threshold).astype(int)\n    tn, fp, fn, tp = confusion_matrix(y_test, pred_y_threshold).ravel()\n    \n    precision = precision_score(y_test, pred_y_threshold)\n    recall = recall_score(y_test, pred_y_threshold)\n    f1 = f1_score(y_test, pred_y_threshold)  # F1 Score 계산\n    fpr = fp / (fp + tn)\n    \n    # 결과 저장\n    results.append({\n        'Threshold': threshold,\n        'Predicted Positive N': tp,\n        'Actual Positive N': tp + fn,\n        'Predicted Negative N': tn,\n        'Actual Negative N': tn + fp,\n        'Precision': precision,\n        'Recall': recall,\n        'F1 Score': f1,\n        'FPR': fpr,\n        'ROC AUC': roc_auc \n    })\n\n# 결과 DataFrame 생성\nresults_df = pd.DataFrame(results)\nresults_df\n# =============================================================\n\n# 임계값 선정\nthreshold = 0.3\npred_y = (prob_y >= threshold).astype(int)\nconfusion_matrix(y_test, pred_y)\n\npred_y\n\ndf_plot=df_59  #####\n\npred_df = pd.DataFrame({\n    '날짜': df_plot[(df_plot['월'] == 8) & ((df_plot['일'] == 19)|(df_plot['일'] == 20))]['날짜'],\n    '예측급증': pred_y,\n    '실제급증': df_plot[(df_plot['월'] == 20) & ((df_plot['일'] == 19)|(df_plot['일'] == 20))]['급증']\n})\n\n## 그래프\nimport seaborn as sns\n\n\ntime_df = df_plot[(df_plot['월'] == 8) & ((df_plot['일'] == 19)|(df_plot['일'] == 20))]\nhighlight = pred_df['예측급증']\nhighlight2 = time_df['급증']\nplt.figure(figsize=(10,7))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] = False\nsns.lineplot(data=time_df , x='날짜', y='전력사용량', color='black')\n#sns.scatterplot(data=time_df , x='날짜', y='전력사용량' ,color='black')\nplt.fill_between(pred_df['날짜'], time_df['전력사용량'],where=highlight, color='red', alpha=0.5, label='급증 구간')\nplt.fill_between(pred_df['날짜'], time_df['전력사용량'],where=highlight2, color='blue', alpha=0.5, label='급증 구간')\nmonthly_ticks = pd.date_range(start=pred_df['날짜'].min(), end=pred_df['날짜'].max(), freq='D')\n# 날짜와 요일을 함께 표시\ntick_labels = [f\"{date.strftime('%Y-%m-%d')}\\n{date.strftime('%a')}\" for date in monthly_ticks]\nplt.xticks(monthly_ticks, tick_labels)\n\n##\n\n\n\n\n\n\n# 이득도표\nprecision, recall, thresholds_pr = precision_recall_curve(y_test, prob_y)\nfpr, tpr, thresholds_roc = roc_curve(y_test, prob_y)\n\n# F1 점수 계산\nf1_scores = [f1_score(y_test, prob_y >= thresh) for thresh in thresholds_pr]\n\n# 이득도표 그리기\nplt.figure(figsize=(12, 8))\n\n# Precision-Recall 커브\nplt.subplot(2, 2, 1)\nplt.plot(thresholds_pr, precision[:-1], label=\"Precision\", color=\"b\")\nplt.plot(thresholds_pr, recall[:-1], label=\"Recall\", color=\"g\")\nplt.xlabel(\"Threshold\")\nplt.ylabel(\"Score\")\nplt.title(\"Precision-Recall Curve\")\nplt.legend()\n\n# F1 Score 커브\nplt.subplot(2, 2, 2)\nplt.plot(thresholds_pr, f1_scores, label=\"F1 Score\", color=\"r\")\nplt.xlabel(\"Threshold\")\nplt.ylabel(\"F1 Score\")\nplt.title(\"F1 Score vs. Threshold\")\n\n# ROC 커브 (TPR, FPR)\nplt.subplot(2, 2, 3)\nplt.plot(fpr, tpr, label=\"ROC Curve\", color=\"purple\")\nplt.plot([0, 1], [0, 1], linestyle=\"--\", color=\"gray\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC Curve\")\nplt.legend()\n\n# 이득도표\ngains = np.cumsum(tpr - fpr)\nplt.subplot(2, 2, 4)\nplt.plot(thresholds_roc, gains, label=\"Gain\", color=\"brown\")\nplt.xlabel(\"Threshold\")\nplt.ylabel(\"Cumulative Gain\")\nplt.title(\"Gain Chart\")\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\n\n# 피처 중요도 가져오기\nfeature_importances = catboost_clf.get_feature_importance()\n\n# 피처 이름\nfeature_names = train_df.drop('급증', axis=1).columns\n\n# 변수 중요도 데이터프레임 생성\nimportance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': feature_importances\n})\n\n# 중요도 기준으로 내림차순 정렬\nimportance_df = importance_df.sort_values(by='Importance')\n\n# 피처 중요도 시각화\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.figure(figsize=(10, 6))\nplt.barh(importance_df['Feature'], importance_df['Importance'])\nplt.xlabel('Importance')\nplt.title('Feature Importance')\nplt.show()\n\n# 정렬된 변수 중요도 데이터프레임 출력\nimportance_df\n\nimportance_df['Feature'].values.shape\n```\n:::\n\n\n## 프레젠테이션\n# PDF 파일 보기\n<iframe src=\"전력 급증 예측 프로젝트.pdf\" width=\"100%\" height=\"800px\">\n\n\n\n\n\n<div id=\"disqus_thread\"></div>\n<script>\nvar disqus_config = function () {\n    this.page.url = window.location.href;  // 현재 페이지 URL\n    this.page.identifier = window.location.pathname; // 페이지 고유 식별자\n};\n\n(function() { // DON'T EDIT BELOW THIS LINE\n    var d = document, s = d.createElement('script');\n    s.src = 'https://sanghoohoo.disqus.com/embed.js';\n    s.setAttribute('data-timestamp', +new Date());\n    (d.head || d.body).appendChild(s);\n})();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}