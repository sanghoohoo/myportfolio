---
title: "Kaggle: Houseprice - Tensorflow"
author: 'Sanghoo Ahn'
date: '2024-09-27'
categories: [Machine Learning]
jupyter: python3
---
## Kaggle 링크
[House Prices - Advanced Regression Techniques](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques)

## 전처리
```{python}
# 필요한 패키지 불러오기
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

np.random.seed(20240911) 

## 필요한 데이터 불러오기
house_train=pd.read_csv("./train.csv")
house_test=pd.read_csv("./test.csv")
sub_df=pd.read_csv("./sample_submission.csv")

## NaN 채우기
# 각 숫치형 변수는 평균 채우기
# 각 범주형 변수는 Unknown 채우기
house_train.isna().sum()
house_test.isna().sum()

## 숫자형 채우기
quantitative = house_train.select_dtypes(include = [int, float])
quantitative.isna().sum()
quant_selected = quantitative.columns[quantitative.isna().sum() > 0]

for col in quant_selected:
    house_train[col] = house_train[col].fillna(house_train[col].mean())
house_train[quant_selected].isna().sum()

## 범주형 채우기
qualitative = house_train.select_dtypes(include = [object])
qualitative.isna().sum()
qual_selected = qualitative.columns[qualitative.isna().sum() > 0]

for col in qual_selected:
    house_train[col] = house_train[col].fillna("unknown")


# test 데이터 채우기
## 숫자형 채우기
quantitative = house_test.select_dtypes(include = [int, float])
quantitative.isna().sum()
quant_selected = quantitative.columns[quantitative.isna().sum() > 0]

for col in quant_selected:
    house_test[col] = house_test[col].fillna(house_train[col].mean())
house_test[quant_selected].isna().sum()

## 범주형 채우기
qualitative = house_test.select_dtypes(include = [object])
qualitative.isna().sum()
qual_selected = qualitative.columns[qualitative.isna().sum() > 0]

for col in qual_selected:
    house_test[col] = house_test[col].fillna("unknown")
house_test[qual_selected].isna().sum()


house_train.shape
house_test.shape
train_n=len(house_train)

# 통합 df 만들기 + 더미코딩
# house_test.select_dtypes(include=[int, float])

df = pd.concat([house_train, house_test], ignore_index=True)
# df.info()
df = pd.get_dummies(
    df,
    columns= df.select_dtypes(include=[object]).columns,
    drop_first=True
    )
df

# train / test 데이터셋
train_df=df.iloc[:train_n,]
test_df=df.iloc[train_n:,]

## 이상치 탐색
train_df=train_df.query("GrLivArea <= 4500")

## train
train_x=train_df.drop("SalePrice", axis=1)
train_y=train_df["SalePrice"]

## test
test_x=test_df.drop("SalePrice", axis=1)

```
   

## 모델 생성
```{python}
#| output: false
# 신경망 모델 정의
model = Sequential()
model.add(Dense(128, input_dim=train_x.shape[1], activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))

# 모델 컴파일
model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')

# 모델 학습
history = model.fit(train_x, train_y, epochs=200, batch_size=32, validation_split=0.1, verbose=1)
```  

## 학습 과정 시각화
```{python}
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='validation loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()
```

## 예측
```{python}
#| output: false
# 예측
pred_y = model.predict(test_x).flatten()
```
```{python}
# SalePrice 바꿔치기
sub_df["SalePrice"] = pred_y
sub_df.head()
```

## 모델 성능
```{python}
#| output: false
# 모델 성능 평가
from sklearn.metrics import mean_squared_error
train_y_pred = model.predict(train_x)
mse = mean_squared_error(train_y, train_y_pred)
```
```{python}
print(f"Mean Squared Error on training set: {mse:.2f}")
```  
  


<div id="disqus_thread"></div>
<script>
var disqus_config = function () {
    this.page.url = window.location.href;  // 현재 페이지 URL
    this.page.identifier = window.location.pathname; // 페이지 고유 식별자
};

(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://sanghoohoo.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>