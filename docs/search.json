[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sanghoo Ahn",
    "section": "",
    "text": "Passionate Electrical Engineering student with a strong foundation in electrical and electronic engineering, specializing in power systems and electronic circuit design.\n\n\n\nKyungpook National Univercity | Daegu, South Korea Bachelor of Electrical Engineering | Mar 2023(transfer) - present GPA : 4.1/4.5\nKorea Polytechnics | Seongnam, South Korea Associate of Electrical Engineering | Mar 2019- Feb 2023 GPA : 4.0/4.5\nCollege of English Language | San Diego, USA English Language Course | Jan 2024 - Mar 2024\n\n\n\n\n\nRepublic of Korean army | Discharged as a sergeant | Jun 2020 - Dec 2021\n\n\n\n\n\nGold Prize in Creative Engineering Design Competition, Kyungpook National University\n\n\n\n\n\nConversation English- OPIc IH certified in May 2024\nProven English proficiency for business with a total score of 965 in TOEIC\nIndustrial Engineer Electricity (national technical qualification)\nCompleted ‘High-speed System Design and Understanding Signal/Power Integrity’ training by IC Design Education Center\nCompleted ‘Basic Training Program for Foundry-Oriented Semiconductor Design’ training by Korea Semiconducter Academy\n\n\n\n\n \n  \n   \n  \n    \n     Github\n  \n  \n    \n     Instagram"
  },
  {
    "objectID": "index.html#홈페이지-첫-화면입니다",
    "href": "index.html#홈페이지-첫-화면입니다",
    "title": "DS Website",
    "section": "",
    "text": "안녕하세요, 데이터 분석 안상후입니다.😀\n\n넘파이를 사용해서 벡터 만들기\n\n\nimport numpy as np\nnp.array([1, 2, 3, 4, 5])\n\narray([1, 2, 3, 4, 5])"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "HW1.html",
    "href": "HW1.html",
    "title": "HW1",
    "section": "",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요. (p.85)\n\nimport pandas as pd\ndf=pd.DataFrame({\n    '제품':['사과','딸기','수박'],\n    '가격':[1800,1500,3000],\n    '판매량':[24,38,13]\n})\nprint(df)\n\n   제품    가격  판매량\n0  사과  1800   24\n1  딸기  1500   38\n2  수박  3000   13\n\n\nmpg데이터 변수명 변경 (p.115)\n\nmpg=pd.read_csv('data/mpg.csv')\nmpg_new=mpg.copy()\nmpg_new=mpg_new.rename(columns={'cty':'city'})\nmpg_new=mpg_new.rename(columns={'hwy':'highway'})\nprint(mpg_new)\n\n    manufacturer   model  displ  year  cyl       trans drv  city  highway fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f    18       29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f    21       29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f    20       31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f    21       30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f    16       26  p   \n..           ...     ...    ...   ...  ...         ...  ..   ...      ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f    19       28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f    21       29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f    16       26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f    18       26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f    17       26  p   \n\n    category  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]\n\n\nmidway.csv를 불러와 데이터의 특징을 파악하세요. (p.130)\n\nmdw=pd.read_csv('data/midwest.csv')\nmdw.describe()\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\npoptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmdw=mdw.rename(columns={'poptotal':'total'})\nmdw=mdw.rename(columns={'popasian':'asian'})\nprint(mdw[['total','asian']])\n\n      total  asian\n0     66090    249\n1     10626     48\n2     14991     16\n3     30806    150\n4      5836      5\n..      ...    ...\n432  304715   2699\n433   46104     92\n434   19385     43\n435  140320   1728\n436   73605    722\n\n[437 rows x 2 columns]\n\n\ntotal,asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport matplotlib.pyplot as plt\nmdw['per_asian']=mdw['asian']/mdw['total']*100\nprint(mdw)\nmdw['per_asian'].hist()\nplt.show()\n\n      PID     county state   area   total   popdensity  popwhite  popblack  \\\n0     561      ADAMS    IL  0.052   66090  1270.961540     63917      1702   \n1     562  ALEXANDER    IL  0.014   10626   759.000000      7054      3496   \n2     563       BOND    IL  0.022   14991   681.409091     14477       429   \n3     564      BOONE    IL  0.017   30806  1812.117650     29344       127   \n4     565      BROWN    IL  0.018    5836   324.222222      5264       547   \n..    ...        ...   ...    ...     ...          ...       ...       ...   \n432  3048   WAUKESHA    WI  0.034  304715  8962.205880    298313      1096   \n433  3049    WAUPACA    WI  0.045   46104  1024.533330     45695        22   \n434  3050   WAUSHARA    WI  0.037   19385   523.918919     19094        29   \n435  3051  WINNEBAGO    WI  0.035  140320  4009.142860    136822       697   \n436  3052       WOOD    WI  0.048   73605  1533.437500     72157        90   \n\n     popamerindian  asian  ...  percprof  poppovertyknown  percpovertyknown  \\\n0               98    249  ...  4.355859            63628         96.274777   \n1               19     48  ...  2.870315            10529         99.087145   \n2               35     16  ...  4.488572            14235         94.956974   \n3               46    150  ...  4.197800            30337         98.477569   \n4               14      5  ...  3.367680             4815         82.505140   \n..             ...    ...  ...       ...              ...               ...   \n432            672   2699  ...  7.667090           299802         98.387674   \n433            125     92  ...  3.138596            44412         96.330036   \n434             70     43  ...  2.620907            19163         98.854785   \n435            685   1728  ...  5.659847           133950         95.460376   \n436            481    722  ...  4.583725            72685         98.750085   \n\n     percbelowpoverty  percchildbelowpovert  percadultpoverty  \\\n0           13.151443             18.011717         11.009776   \n1           32.244278             45.826514         27.385647   \n2           12.068844             14.036061         10.852090   \n3            7.209019             11.179536          5.536013   \n4           13.520249             13.022889         11.143211   \n..                ...                   ...               ...   \n432          3.121060              3.785820          2.590061   \n433          8.488697             10.071411          6.953799   \n434         13.786985             20.050708         11.695784   \n435          8.804031             10.592031          8.660587   \n436          8.525831             11.162997          7.375656   \n\n     percelderlypoverty  inmetro  category  per_asian  \n0             12.443812        0       AAR   0.376759  \n1             25.228976        0       LHR   0.451722  \n2             12.697410        0       AAR   0.106731  \n3              6.217047        1       ALU   0.486918  \n4             19.200000        0       AAR   0.085675  \n..                  ...      ...       ...        ...  \n432            4.085479        1       HLU   0.885746  \n433           10.338641        0       AAR   0.199549  \n434           11.804558        0       AAR   0.221821  \n435            6.661094        1       HAU   1.231471  \n436            7.882918        0       AAR   0.980912  \n\n[437 rows x 29 columns]\n\n\n\n\n\n\n\n\n\n아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘Large’, 그 외에는 ’Small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\navg_asian=mdw['per_asian'].mean()\nmdw['amo_asian']=np.where((mdw['per_asian']&gt;avg_asian),'Large','Small')\nprint(mdw)\n\n      PID     county state   area   total   popdensity  popwhite  popblack  \\\n0     561      ADAMS    IL  0.052   66090  1270.961540     63917      1702   \n1     562  ALEXANDER    IL  0.014   10626   759.000000      7054      3496   \n2     563       BOND    IL  0.022   14991   681.409091     14477       429   \n3     564      BOONE    IL  0.017   30806  1812.117650     29344       127   \n4     565      BROWN    IL  0.018    5836   324.222222      5264       547   \n..    ...        ...   ...    ...     ...          ...       ...       ...   \n432  3048   WAUKESHA    WI  0.034  304715  8962.205880    298313      1096   \n433  3049    WAUPACA    WI  0.045   46104  1024.533330     45695        22   \n434  3050   WAUSHARA    WI  0.037   19385   523.918919     19094        29   \n435  3051  WINNEBAGO    WI  0.035  140320  4009.142860    136822       697   \n436  3052       WOOD    WI  0.048   73605  1533.437500     72157        90   \n\n     popamerindian  asian  ...  poppovertyknown  percpovertyknown  \\\n0               98    249  ...            63628         96.274777   \n1               19     48  ...            10529         99.087145   \n2               35     16  ...            14235         94.956974   \n3               46    150  ...            30337         98.477569   \n4               14      5  ...             4815         82.505140   \n..             ...    ...  ...              ...               ...   \n432            672   2699  ...           299802         98.387674   \n433            125     92  ...            44412         96.330036   \n434             70     43  ...            19163         98.854785   \n435            685   1728  ...           133950         95.460376   \n436            481    722  ...            72685         98.750085   \n\n     percbelowpoverty  percchildbelowpovert  percadultpoverty  \\\n0           13.151443             18.011717         11.009776   \n1           32.244278             45.826514         27.385647   \n2           12.068844             14.036061         10.852090   \n3            7.209019             11.179536          5.536013   \n4           13.520249             13.022889         11.143211   \n..                ...                   ...               ...   \n432          3.121060              3.785820          2.590061   \n433          8.488697             10.071411          6.953799   \n434         13.786985             20.050708         11.695784   \n435          8.804031             10.592031          8.660587   \n436          8.525831             11.162997          7.375656   \n\n     percelderlypoverty  inmetro  category  per_asian  amo_asian  \n0             12.443812        0       AAR   0.376759      Small  \n1             25.228976        0       LHR   0.451722      Small  \n2             12.697410        0       AAR   0.106731      Small  \n3              6.217047        1       ALU   0.486918      Small  \n4             19.200000        0       AAR   0.085675      Small  \n..                  ...      ...       ...        ...        ...  \n432            4.085479        1       HLU   0.885746      Large  \n433           10.338641        0       AAR   0.199549      Small  \n434           11.804558        0       AAR   0.221821      Small  \n435            6.661094        1       HAU   1.231471      Large  \n436            7.882918        0       AAR   0.980912      Large  \n\n[437 rows x 30 columns]\n\n\n’Large’와 ’Small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nplt.clf()\nasian_counts=mdw['amo_asian'].value_counts()\nprint(asian_counts)\nasian_counts.plot.bar(rot=0)\nplt.show()\n\namo_asian\nSmall    318\nLarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "index.html#안녕하세요요",
    "href": "index.html#안녕하세요요",
    "title": "DS Website",
    "section": "",
    "text": "안녕하세요, 데이터 분석 안상후입니다.\n\n넘파이를 사용해서 벡터 만들기\n\n\nimport numpy as np\nnp.array([1, 2, 3, 4, 5])\n\narray([1, 2, 3, 4, 5])"
  },
  {
    "objectID": "index.html#안녕하세요",
    "href": "index.html#안녕하세요",
    "title": "Sanghoo Ahn",
    "section": "안녕하세요!😀",
    "text": "안녕하세요!😀\n안녕하세요, 데이터 분석 안상후입니다.\n\n넘파이를 사용해서 벡터 만들기\n\n\nimport numpy as np\nnp.array([1, 2, 3, 4, 5])\n\narray([1, 2, 3, 4, 5])"
  },
  {
    "objectID": "HW2.html",
    "href": "HW2.html",
    "title": "HW2",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nimport numpy as np\nmpg=pd.read_csv('data/mpg.csv')\nmpg_l=mpg.query('displ&lt;=4')\nmpg_h=mpg.query('displ&gt;=5')\nmpg_l['hwy'].mean()\nmpg_h['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)평균이 더 높은지 알아보세요.\n\nmpg_au=mpg.query('manufacturer==\"audi\"')\nmpg_to=mpg.query('manufacturer==\"toyota\"')\nmpg_au['cty'].mean()\nmpg_to['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n‘chevrolet’,‘ford’,’honda’자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nmpg_3=mpg.query('manufacturer in[\"chevrolet\",\"ford\",\"honda\"]')\nmpg_3['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "HW2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.144",
    "href": "HW2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.144",
    "title": "HW2",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nimport numpy as np\nmpg=pd.read_csv('data/mpg.csv')\nmpg_l=mpg.query('displ&lt;=4')\nmpg_h=mpg.query('displ&gt;=5')\nmpg_l['hwy'].mean()\nmpg_h['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)평균이 더 높은지 알아보세요.\n\nmpg_au=mpg.query('manufacturer==\"audi\"')\nmpg_to=mpg.query('manufacturer==\"toyota\"')\nmpg_au['cty'].mean()\nmpg_to['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n‘chevrolet’,‘ford’,’honda’자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nmpg_3=mpg.query('manufacturer in[\"chevrolet\",\"ford\",\"honda\"]')\nmpg_3['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Sanghoo Ahn",
    "section": "",
    "text": "Kyungpook National Univercity | Daegu, South Korea Bachelor of Electrical Engineering | Mar 2023(transfer) - present GPA : 4.1/4.5\nKorea Polytechnics | Seongnam, South Korea Associate of Electrical Engineering | Mar 2019- Feb 2023 GPA : 4.0/4.5\nCollege of English Language | San Diego, USA English Language Course | Jan 2024 - Mar 2024"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Sanghoo Ahn",
    "section": "",
    "text": "Republic of Korean army | Discharged as a sergeant | Jun 2020 - Dec 2021"
  },
  {
    "objectID": "HW2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "href": "HW2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "title": "HW2",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)\n’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nmpg.query('manufacturer==\"audi\"').sort_values('hwy',ascending=False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "HW2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "href": "HW2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "title": "HW2",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)\nmpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg_new=mpg.copy()\nmpg_new=mpg_new.assign(total=mpg['cty']+mpg['hwy'])\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new=mpg_new.assign(mean=mpg_new['total']/2)\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mean',ascending=False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해보세요. 데이터는 복사본 대신 mpg파일을 이용하세요.\n\nmpg.assign(total= lambda x: x['hwy']+x['cty'],\n    mean= lambda x: x['total']/2)\\\n    .sort_values('mean',ascending=False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "index.html#certificates-other-slills",
    "href": "index.html#certificates-other-slills",
    "title": "Sanghoo Ahn",
    "section": "",
    "text": "Conversation English- OPIc IH certified in May 2024\nProven English proficiency for business with a total score of 965 in TOEIC\nIndustrial Engineer Electricity (national technical qualification)\nCompleted ‘High-speed System Design and Understanding Signal/Power Integrity’ training by IC Design Education Center\nCompleted ‘Basic Training Program for Foundry-Oriented Semiconductor Design’ training by Korea Semiconducter Academy"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "HW2.1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nHW2.2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nHW3\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nHW4\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nHW5\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nHW2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\n\n\n\n\n\n\nHW1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 12, 2024\n\n\nSanghoo Ahn\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "HW2",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nimport numpy as np\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nmpg_l=mpg.query('displ&lt;=4')\nmpg_h=mpg.query('displ&gt;=5')\nmpg_l['hwy'].mean()\nmpg_h['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)평균이 더 높은지 알아보세요.\n\nmpg_au=mpg.query('manufacturer==\"audi\"')\nmpg_to=mpg.query('manufacturer==\"toyota\"')\nmpg_au['cty'].mean()\nmpg_to['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n‘chevrolet’,‘ford’,’honda’자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nmpg_3=mpg.query('manufacturer in[\"chevrolet\",\"ford\",\"honda\"]')\nmpg_3['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.144",
    "href": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.144",
    "title": "HW2",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nimport numpy as np\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nmpg_l=mpg.query('displ&lt;=4')\nmpg_h=mpg.query('displ&gt;=5')\nmpg_l['hwy'].mean()\nmpg_h['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)평균이 더 높은지 알아보세요.\n\nmpg_au=mpg.query('manufacturer==\"audi\"')\nmpg_to=mpg.query('manufacturer==\"toyota\"')\nmpg_au['cty'].mean()\nmpg_to['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n‘chevrolet’,‘ford’,’honda’자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nmpg_3=mpg.query('manufacturer in[\"chevrolet\",\"ford\",\"honda\"]')\nmpg_3['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "href": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "title": "HW2",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)\n’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nmpg.query('manufacturer==\"audi\"').sort_values('hwy',ascending=False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "href": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "title": "HW2",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)\nmpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg_new=mpg.copy()\nmpg_new=mpg_new.assign(total=mpg['cty']+mpg['hwy'])\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new=mpg_new.assign(mean=mpg_new['total']/2)\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mean',ascending=False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해보세요. 데이터는 복사본 대신 mpg파일을 이용하세요.\n\nmpg.assign(total= lambda x: x['hwy']+x['cty'],\n    mean= lambda x: x['total']/2)\\\n    .sort_values('mean',ascending=False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "HW1",
    "section": "",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요. (p.85)\n\nimport pandas as pd\ndf=pd.DataFrame({\n    '제품':['사과','딸기','수박'],\n    '가격':[1800,1500,3000],\n    '판매량':[24,38,13]\n})\nprint(df)\n\n   제품    가격  판매량\n0  사과  1800   24\n1  딸기  1500   38\n2  수박  3000   13\n\n\nmpg데이터 변수명 변경 (p.115)\n\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nmpg_new=mpg.copy()\nmpg_new=mpg_new.rename(columns={'cty':'city'})\nmpg_new=mpg_new.rename(columns={'hwy':'highway'})\nprint(mpg_new)\n\n    manufacturer   model  displ  year  cyl       trans drv  city  highway fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f    18       29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f    21       29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f    20       31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f    21       30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f    16       26  p   \n..           ...     ...    ...   ...  ...         ...  ..   ...      ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f    19       28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f    21       29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f    16       26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f    18       26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f    17       26  p   \n\n    category  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]\n\n\nmidway.csv를 불러와 데이터의 특징을 파악하세요. (p.130)\n\nmdw=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/midwest.csv')\nmdw.describe()\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\npoptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmdw=mdw.rename(columns={'poptotal':'total'})\nmdw=mdw.rename(columns={'popasian':'asian'})\nprint(mdw[['total','asian']])\n\n      total  asian\n0     66090    249\n1     10626     48\n2     14991     16\n3     30806    150\n4      5836      5\n..      ...    ...\n432  304715   2699\n433   46104     92\n434   19385     43\n435  140320   1728\n436   73605    722\n\n[437 rows x 2 columns]\n\n\ntotal,asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport matplotlib.pyplot as plt\nmdw['per_asian']=mdw['asian']/mdw['total']*100\nprint(mdw)\nmdw['per_asian'].hist()\nplt.show()\n\n      PID     county state   area   total   popdensity  popwhite  popblack  \\\n0     561      ADAMS    IL  0.052   66090  1270.961540     63917      1702   \n1     562  ALEXANDER    IL  0.014   10626   759.000000      7054      3496   \n2     563       BOND    IL  0.022   14991   681.409091     14477       429   \n3     564      BOONE    IL  0.017   30806  1812.117650     29344       127   \n4     565      BROWN    IL  0.018    5836   324.222222      5264       547   \n..    ...        ...   ...    ...     ...          ...       ...       ...   \n432  3048   WAUKESHA    WI  0.034  304715  8962.205880    298313      1096   \n433  3049    WAUPACA    WI  0.045   46104  1024.533330     45695        22   \n434  3050   WAUSHARA    WI  0.037   19385   523.918919     19094        29   \n435  3051  WINNEBAGO    WI  0.035  140320  4009.142860    136822       697   \n436  3052       WOOD    WI  0.048   73605  1533.437500     72157        90   \n\n     popamerindian  asian  ...  percprof  poppovertyknown  percpovertyknown  \\\n0               98    249  ...  4.355859            63628         96.274777   \n1               19     48  ...  2.870315            10529         99.087145   \n2               35     16  ...  4.488572            14235         94.956974   \n3               46    150  ...  4.197800            30337         98.477569   \n4               14      5  ...  3.367680             4815         82.505140   \n..             ...    ...  ...       ...              ...               ...   \n432            672   2699  ...  7.667090           299802         98.387674   \n433            125     92  ...  3.138596            44412         96.330036   \n434             70     43  ...  2.620907            19163         98.854785   \n435            685   1728  ...  5.659847           133950         95.460376   \n436            481    722  ...  4.583725            72685         98.750085   \n\n     percbelowpoverty  percchildbelowpovert  percadultpoverty  \\\n0           13.151443             18.011717         11.009776   \n1           32.244278             45.826514         27.385647   \n2           12.068844             14.036061         10.852090   \n3            7.209019             11.179536          5.536013   \n4           13.520249             13.022889         11.143211   \n..                ...                   ...               ...   \n432          3.121060              3.785820          2.590061   \n433          8.488697             10.071411          6.953799   \n434         13.786985             20.050708         11.695784   \n435          8.804031             10.592031          8.660587   \n436          8.525831             11.162997          7.375656   \n\n     percelderlypoverty  inmetro  category  per_asian  \n0             12.443812        0       AAR   0.376759  \n1             25.228976        0       LHR   0.451722  \n2             12.697410        0       AAR   0.106731  \n3              6.217047        1       ALU   0.486918  \n4             19.200000        0       AAR   0.085675  \n..                  ...      ...       ...        ...  \n432            4.085479        1       HLU   0.885746  \n433           10.338641        0       AAR   0.199549  \n434           11.804558        0       AAR   0.221821  \n435            6.661094        1       HAU   1.231471  \n436            7.882918        0       AAR   0.980912  \n\n[437 rows x 29 columns]\n\n\n\n\n\n\n\n\n\n아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘Large’, 그 외에는 ’Small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\navg_asian=mdw['per_asian'].mean()\nmdw['amo_asian']=np.where((mdw['per_asian']&gt;avg_asian),'Large','Small')\nprint(mdw)\n\n      PID     county state   area   total   popdensity  popwhite  popblack  \\\n0     561      ADAMS    IL  0.052   66090  1270.961540     63917      1702   \n1     562  ALEXANDER    IL  0.014   10626   759.000000      7054      3496   \n2     563       BOND    IL  0.022   14991   681.409091     14477       429   \n3     564      BOONE    IL  0.017   30806  1812.117650     29344       127   \n4     565      BROWN    IL  0.018    5836   324.222222      5264       547   \n..    ...        ...   ...    ...     ...          ...       ...       ...   \n432  3048   WAUKESHA    WI  0.034  304715  8962.205880    298313      1096   \n433  3049    WAUPACA    WI  0.045   46104  1024.533330     45695        22   \n434  3050   WAUSHARA    WI  0.037   19385   523.918919     19094        29   \n435  3051  WINNEBAGO    WI  0.035  140320  4009.142860    136822       697   \n436  3052       WOOD    WI  0.048   73605  1533.437500     72157        90   \n\n     popamerindian  asian  ...  poppovertyknown  percpovertyknown  \\\n0               98    249  ...            63628         96.274777   \n1               19     48  ...            10529         99.087145   \n2               35     16  ...            14235         94.956974   \n3               46    150  ...            30337         98.477569   \n4               14      5  ...             4815         82.505140   \n..             ...    ...  ...              ...               ...   \n432            672   2699  ...           299802         98.387674   \n433            125     92  ...            44412         96.330036   \n434             70     43  ...            19163         98.854785   \n435            685   1728  ...           133950         95.460376   \n436            481    722  ...            72685         98.750085   \n\n     percbelowpoverty  percchildbelowpovert  percadultpoverty  \\\n0           13.151443             18.011717         11.009776   \n1           32.244278             45.826514         27.385647   \n2           12.068844             14.036061         10.852090   \n3            7.209019             11.179536          5.536013   \n4           13.520249             13.022889         11.143211   \n..                ...                   ...               ...   \n432          3.121060              3.785820          2.590061   \n433          8.488697             10.071411          6.953799   \n434         13.786985             20.050708         11.695784   \n435          8.804031             10.592031          8.660587   \n436          8.525831             11.162997          7.375656   \n\n     percelderlypoverty  inmetro  category  per_asian  amo_asian  \n0             12.443812        0       AAR   0.376759      Small  \n1             25.228976        0       LHR   0.451722      Small  \n2             12.697410        0       AAR   0.106731      Small  \n3              6.217047        1       ALU   0.486918      Small  \n4             19.200000        0       AAR   0.085675      Small  \n..                  ...      ...       ...        ...        ...  \n432            4.085479        1       HLU   0.885746      Large  \n433           10.338641        0       AAR   0.199549      Small  \n434           11.804558        0       AAR   0.221821      Small  \n435            6.661094        1       HAU   1.231471      Large  \n436            7.882918        0       AAR   0.980912      Large  \n\n[437 rows x 30 columns]\n\n\n’Large’와 ’Small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nplt.clf()\nasian_counts=mdw['amo_asian'].value_counts()\nprint(asian_counts)\nasian_counts.plot.bar(rot=0)\nplt.show()\n\namo_asian\nSmall    318\nLarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "HW3",
    "section": "",
    "text": "문제 1\n정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport math\n\ndef Norm(x, mu, sigma):\n    return (1/(sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu) / sigma)**2)\nk=np.linspace(-7,13,100)\n\nmy_n=Norm(k,3,2)\n\nplt.plot(k,my_n)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n문제 2\n파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n\nX ~ N(2, 3^2)\n\nP(X &lt; 3)\n\n\n\nnorm.cdf(3, loc=2, scale=3)\n\nnp.float64(0.6305586598182363)\n\n\n\n\nP(2 &lt; X &lt; 5)\n\n\n\nnorm.cdf(5, loc=2, scale=3)-norm.cdf(2, loc=2, scale=3)\n\nnp.float64(0.3413447460685429)\n\n\n\n\nP(X &lt; 3 or X &gt; 7)\n\n\n\nnorm.cdf(3, loc=2, scale=3)+1-norm.cdf(7, loc=2, scale=3)\n\nnp.float64(0.6783490120910509)\n\n\n\n\n문제 3\nLS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?\n\nscore=norm.ppf(0.95, loc=30, scale=2)\nprint(score)\n\n33.28970725390295"
  },
  {
    "objectID": "posts/hw3/index.html#plotly를-활용한-인터랙티브-시각화",
    "href": "posts/hw3/index.html#plotly를-활용한-인터랙티브-시각화",
    "title": "HW3",
    "section": "",
    "text": "exam데이터 불러오기\n\nimport pandas as pd\nimport plotly.express as px\nexam=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/exam.csv')\nexam\n\n\n\n\n\n\n\n\nid\nnclass\nmath\nenglish\nscience\n\n\n\n\n0\n1\n1\n50\n98\n50\n\n\n1\n2\n1\n60\n97\n60\n\n\n2\n3\n1\n45\n86\n78\n\n\n3\n4\n1\n30\n98\n58\n\n\n4\n5\n2\n25\n80\n65\n\n\n5\n6\n2\n50\n89\n98\n\n\n6\n7\n2\n80\n90\n45\n\n\n7\n8\n2\n90\n78\n25\n\n\n8\n9\n3\n20\n98\n15\n\n\n9\n10\n3\n50\n98\n45\n\n\n10\n11\n3\n65\n65\n65\n\n\n11\n12\n3\n45\n85\n32\n\n\n12\n13\n4\n46\n98\n65\n\n\n13\n14\n4\n48\n87\n12\n\n\n14\n15\n4\n75\n56\n78\n\n\n15\n16\n4\n58\n98\n65\n\n\n16\n17\n5\n65\n68\n98\n\n\n17\n18\n5\n80\n78\n90\n\n\n18\n19\n5\n89\n68\n87\n\n\n19\n20\n5\n78\n83\n58\n\n\n\n\n\n\n\n학급별 수학 성적 분포 산점도\n\npx.scatter(data_frame=exam,\n            x='nclass', y='math', color='nclass')\n\n                                                \n\n\n학급별 수학 성적 평균 막대그래프\n\ndf=exam.groupby('nclass', as_index=False).agg(math_mean=('math','mean'))\ndf\npx.bar(data_frame=df, x='nclass', y='math_mean', color='nclass')"
  },
  {
    "objectID": "posts/hw3/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "href": "posts/hw3/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "title": "HW3",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)\n’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nmpg.query('manufacturer==\"audi\"').sort_values('hwy',ascending=False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw3/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "href": "posts/hw3/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "title": "HW3",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)\nmpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg_new=mpg.copy()\nmpg_new=mpg_new.assign(total=mpg['cty']+mpg['hwy'])\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new=mpg_new.assign(mean=mpg_new['total']/2)\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mean',ascending=False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해보세요. 데이터는 복사본 대신 mpg파일을 이용하세요.\n\nmpg.assign(total= lambda x: x['hwy']+x['cty'],\n    mean= lambda x: x['total']/2)\\\n    .sort_values('mean',ascending=False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "HW4",
    "section": "",
    "text": "표본 분산 n-1 vs. n\n표본 분산 계산 시 왜 n-1로 나누는지 알아보도록 하겠습니다. 균일분포 (3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요.\n\nn-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import uniform\nimport seaborn as sns\nx=uniform.rvs(loc=3, scale=4, size=200000).reshape(10000,20)\nx.shape\ns_2=(((x - 5)**2) / (20-1)).sum(axis=1)\nsns.histplot(s_2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nk_2=(((x - 5)**2) / 20).sum(axis=1)\nsns.histplot(k_2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n\nvar_x=np.var(x)\nsns.histplot(s_2)\nplt.axvline(x=var_x, color='red', linestyle='--', linewidth=1)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nsns.histplot(k_2)\nplt.axvline(x=var_x, color='red', linestyle='--', linewidth=1)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n\n\nn-1로 나눈 결과 분포의 평균이 모분산에 더 근접함"
  },
  {
    "objectID": "posts/hw4/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.144",
    "href": "posts/hw4/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.144",
    "title": "HW3",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nimport numpy as np\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nmpg_l=mpg.query('displ&lt;=4')\nmpg_h=mpg.query('displ&gt;=5')\nmpg_l['hwy'].mean()\nmpg_h['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)평균이 더 높은지 알아보세요.\n\nmpg_au=mpg.query('manufacturer==\"audi\"')\nmpg_to=mpg.query('manufacturer==\"toyota\"')\nmpg_au['cty'].mean()\nmpg_to['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n‘chevrolet’,‘ford’,’honda’자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nmpg_3=mpg.query('manufacturer in[\"chevrolet\",\"ford\",\"honda\"]')\nmpg_3['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw4/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "href": "posts/hw4/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.153",
    "title": "HW3",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.153)\n’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nmpg.query('manufacturer==\"audi\"').sort_values('hwy',ascending=False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw4/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "href": "posts/hw4/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.-p.158",
    "title": "HW3",
    "section": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)",
    "text": "mpg 데이터를 이용해 분석 문제를 해결해 보세요. (p.158)\nmpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg_new=mpg.copy()\nmpg_new=mpg_new.assign(total=mpg['cty']+mpg['hwy'])\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_new=mpg_new.assign(mean=mpg_new['total']/2)\nmpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_new.sort_values('mean',ascending=False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해보세요. 데이터는 복사본 대신 mpg파일을 이용하세요.\n\nmpg.assign(total= lambda x: x['hwy']+x['cty'],\n    mean= lambda x: x['total']/2)\\\n    .sort_values('mean',ascending=False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw4/index.html#section",
    "href": "posts/hw4/index.html#section",
    "title": "HW4",
    "section": "",
    "text": "."
  },
  {
    "objectID": "posts/hw4/index.html#mpg데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw4/index.html#mpg데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "HW4",
    "section": "",
    "text": "mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nsns.scatterplot(data=mpg,\n                x='cty', y='hwy')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmdw=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/midwest.csv')\nsns.scatterplot(data=mdw,\n                x='poptotal', y='popasian').set(xlim=[0,500000], ylim=[0,10000])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw4/index.html#mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw4/index.html#mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "HW4",
    "section": "mpg데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "mpg데이터를 이용해 분석 문제를 해결해 보세요.\n어떤 회사에서 생산한 ’suv’차종의 도시 연비가 높은지 알아보려고 합니다. ’suv’차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\ndf_mpg=mpg.groupby('manufacturer', as_index=False)\\\n    .agg(cty_mean=('cty','mean')).\\\n    sort_values('cty_mean',ascending=False).head()\nsns.barplot(data=df_mpg, x='manufacturer', y='cty_mean', hue='manufacturer')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요\n\ndf_mpg2=mpg.groupby('category', as_index=False)\\\n    .agg(cat_count=('category','count')).\\\n    sort_values('cat_count',ascending=False)\nsns.barplot(data=df_mpg2, x='category', y='cat_count', hue='category')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw2.1/index.html",
    "href": "posts/hw2.1/index.html",
    "title": "HW2.1",
    "section": "",
    "text": "exam데이터 불러오기\n\nimport pandas as pd\nimport plotly.express as px\nexam=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/exam.csv')\nexam\n\n\n\n\n\n\n\n\nid\nnclass\nmath\nenglish\nscience\n\n\n\n\n0\n1\n1\n50\n98\n50\n\n\n1\n2\n1\n60\n97\n60\n\n\n2\n3\n1\n45\n86\n78\n\n\n3\n4\n1\n30\n98\n58\n\n\n4\n5\n2\n25\n80\n65\n\n\n5\n6\n2\n50\n89\n98\n\n\n6\n7\n2\n80\n90\n45\n\n\n7\n8\n2\n90\n78\n25\n\n\n8\n9\n3\n20\n98\n15\n\n\n9\n10\n3\n50\n98\n45\n\n\n10\n11\n3\n65\n65\n65\n\n\n11\n12\n3\n45\n85\n32\n\n\n12\n13\n4\n46\n98\n65\n\n\n13\n14\n4\n48\n87\n12\n\n\n14\n15\n4\n75\n56\n78\n\n\n15\n16\n4\n58\n98\n65\n\n\n16\n17\n5\n65\n68\n98\n\n\n17\n18\n5\n80\n78\n90\n\n\n18\n19\n5\n89\n68\n87\n\n\n19\n20\n5\n78\n83\n58\n\n\n\n\n\n\n\n학급별 수학 성적 분포 산점도\n\npx.scatter(data_frame=exam,\n            x='nclass', y='math', color='nclass')\n\n                                                \n\n\n학급별 수학 성적 평균 막대그래프\n\ndf=exam.groupby('nclass', as_index=False).agg(math_mean=('math','mean'))\ndf\npx.bar(data_frame=df, x='nclass', y='math_mean', color='nclass')"
  },
  {
    "objectID": "posts/hw2.1/index.html#plotly를-활용한-인터랙티브-시각화",
    "href": "posts/hw2.1/index.html#plotly를-활용한-인터랙티브-시각화",
    "title": "HW2.1",
    "section": "",
    "text": "exam데이터 불러오기\n\nimport pandas as pd\nimport plotly.express as px\nexam=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/exam.csv')\nexam\n\n\n\n\n\n\n\n\nid\nnclass\nmath\nenglish\nscience\n\n\n\n\n0\n1\n1\n50\n98\n50\n\n\n1\n2\n1\n60\n97\n60\n\n\n2\n3\n1\n45\n86\n78\n\n\n3\n4\n1\n30\n98\n58\n\n\n4\n5\n2\n25\n80\n65\n\n\n5\n6\n2\n50\n89\n98\n\n\n6\n7\n2\n80\n90\n45\n\n\n7\n8\n2\n90\n78\n25\n\n\n8\n9\n3\n20\n98\n15\n\n\n9\n10\n3\n50\n98\n45\n\n\n10\n11\n3\n65\n65\n65\n\n\n11\n12\n3\n45\n85\n32\n\n\n12\n13\n4\n46\n98\n65\n\n\n13\n14\n4\n48\n87\n12\n\n\n14\n15\n4\n75\n56\n78\n\n\n15\n16\n4\n58\n98\n65\n\n\n16\n17\n5\n65\n68\n98\n\n\n17\n18\n5\n80\n78\n90\n\n\n18\n19\n5\n89\n68\n87\n\n\n19\n20\n5\n78\n83\n58\n\n\n\n\n\n\n\n학급별 수학 성적 분포 산점도\n\npx.scatter(data_frame=exam,\n            x='nclass', y='math', color='nclass')\n\n                                                \n\n\n학급별 수학 성적 평균 막대그래프\n\ndf=exam.groupby('nclass', as_index=False).agg(math_mean=('math','mean'))\ndf\npx.bar(data_frame=df, x='nclass', y='math_mean', color='nclass')"
  },
  {
    "objectID": "posts/hw2.2/index.html",
    "href": "posts/hw2.2/index.html",
    "title": "HW2.2",
    "section": "",
    "text": "mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nsns.scatterplot(data=mpg,\n                x='cty', y='hwy')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmdw=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/midwest.csv')\nsns.scatterplot(data=mdw,\n                x='poptotal', y='popasian').set(xlim=[0,500000], ylim=[0,10000])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw2.2/index.html#mpg데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw2.2/index.html#mpg데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "HW2.2",
    "section": "",
    "text": "mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpg=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/mpg.csv')\nsns.scatterplot(data=mpg,\n                x='cty', y='hwy')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmdw=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/midwest.csv')\nsns.scatterplot(data=mdw,\n                x='poptotal', y='popasian').set(xlim=[0,500000], ylim=[0,10000])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw2.2/index.html#mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw2.2/index.html#mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "HW2.2",
    "section": "mpg데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "mpg데이터를 이용해 분석 문제를 해결해 보세요.\n어떤 회사에서 생산한 ’suv’차종의 도시 연비가 높은지 알아보려고 합니다. ’suv’차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\ndf_mpg=mpg.groupby('manufacturer', as_index=False)\\\n    .agg(cty_mean=('cty','mean')).\\\n    sort_values('cty_mean',ascending=False).head()\nsns.barplot(data=df_mpg, x='manufacturer', y='cty_mean', hue='manufacturer')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요\n\ndf_mpg2=mpg.groupby('category', as_index=False)\\\n    .agg(cat_count=('category','count')).\\\n    sort_values('cat_count',ascending=False)\nsns.barplot(data=df_mpg2, x='category', y='cat_count', hue='category')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "index.html#awards-honors",
    "href": "index.html#awards-honors",
    "title": "Sanghoo Ahn",
    "section": "",
    "text": "Gold Prize in Creative Engineering Design Competition, Kyungpook National University"
  },
  {
    "objectID": "posts/hw5/index.html",
    "href": "posts/hw5/index.html",
    "title": "HW5",
    "section": "",
    "text": "성별에 따른 월급 설문조사 그래프에서 각 성별 95% 신뢰구간 계산 후 그리기 norm.ppf() 사용해서 그릴 것. 모분산은 표본분산을 사용해서 규정.\n\n기존 그래프\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nraw_welfare = pd.read_spss('C:/Users/USER/Documents/LS빅데이터스쿨/myportfolio/data/Koweps_hpwc14_2019_beta2.sav')\nwelfare=raw_welfare.copy()\n\nwelfare = welfare.rename(\n    columns = {'h14_g3' : 'sex',\n               'h14_g4' : 'birth',\n               'h14_g10' : 'marriage_type',\n               'h14_g11' : 'religion',\n               'p1402_8aq1' : 'income',\n               'h14_eco9' : 'code_job',\n               'h14_reg7' : 'code_religion',}\n)\n\nwelfare = welfare[['sex','birth', 'marriage_type', 'religion',\n                   'income', 'code_job', 'code_religion']]\n                   \nwelfare['sex']=np.where(welfare['sex']==1, 'male', 'female')\n\nsex_income = welfare.dropna(subset = 'income')\\\n                    .groupby('sex', as_index = False)\\\n                    .agg(mean_income = ('income', 'mean'))\n                    \nsns.barplot(data = sex_income, x = 'sex', y = 'mean_income', hue = 'sex')\n\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n표본평균과 표본분산 구하기\n\nmean_male = sex_income.iloc[1,1]\nmean_female = sex_income.iloc[0,1]\nprint('mean male: ', mean_male)\n\nmean male:  349.03757099169945\n\n\n\nprint('mean female: ', mean_female)\n\nmean female:  186.29309576837417\n\n\n\nstd_income = welfare.dropna(subset = 'income')\\\n                    .groupby('sex', as_index = False)\\\n                    .agg(std_income = ('income', 'std'))\nstd_male = std_income.iloc[1,1]\nstd_female = std_income.iloc[0,1]\n\nprint('std. male: ', std_male)\n\nstd. male:  217.86225435930135\n\n\n\nprint('std. female:', std_female)\n\nstd. female: 132.05740180730666\n\n\n\n\n신뢰구간 구하기\n\nfrom scipy.stats import norm\nz_0025 = norm.ppf(0.975, loc=0, scale=1)\nn_male = welfare.dropna(subset = 'income').query(\"sex=='male'\")['income'].count()\nn_female = welfare.dropna(subset = 'income').query(\"sex=='female'\")['income'].count()\nci_male1 = mean_male + z_0025 * std_male/np.sqrt(n_male)\nci_male2 = mean_male - z_0025 * std_male/np.sqrt(n_male)\nci_female1 = mean_female + z_0025 * std_female/np.sqrt(n_female)\nci_female2 = mean_female - z_0025 * std_female/np.sqrt(n_female)\nci_male1\nci_male2\n\nprint('c.i.male upper: ', ci_male1)\n\nc.i.male upper:  357.96254968365116\n\n\n\nprint('c.i.male lower: ', ci_male2)\n\nc.i.male lower:  340.11259229974775\n\n\n\nprint('c.i.female upper: ', ci_female1)\n\nc.i.female upper:  191.7557368532799\n\n\n\nprint('c.i.female lower: ', ci_female1)\n\nc.i.female lower:  191.7557368532799\n\n\n\n\n그래프 그리기\n\nsns.barplot(data = sex_income, x = 'sex', y = 'mean_income', hue = 'sex')\nplt.plot([0,0], [ci_female1 , ci_female2], color='r')\nplt.plot([1,1], [ci_male1 , ci_male2], color='r')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  }
]